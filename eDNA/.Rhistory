plot_ordination(phylo_obj, NMDS,
## USER EDITS shape, color, alpha, fill, etc. as desired based on project metadata
color = "SampleType") +
## Point and point aesthetics
geom_point(aes(color = SampleType), alpha = .5, size = 5) +
scale_color_manual(values = c("green4", "gold3")) +
## Labels: USER EDITS as desired
labs(color = "Project") +
ggtitle("NMDS example") +
## adding stress value to plot
annotate(geom = "label", x = -Inf, y = Inf, label = sprintf("Stress: %.3f", NMDS$stress), hjust = 0, vjust = 1,
label.size = NA, fontface = "italic", color = "grey30", size = 4.5, fill="white") +
## Theme: USER EDITS as desired
theme_bw() +
theme(
legend.title = element_text(face = "bold", size=12),
legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold"),
)
## USER EDITS WIDTH AND HEIGHT TO DESIRED
ggsave("example_output/Figures/NMDS_phyloseq.png", width = 7, height = 5)
## Plotting
plot_ordination(phylo_obj, NMDS,
## USER EDITS shape, color, alpha, fill, etc. as desired based on project metadata
color = "SampleType") +
## Point and point aesthetics
geom_point(aes(color = SampleType), alpha = .5, size = 5) +
scale_color_manual(values = c("green4", "gold3")) +
## Labels: USER EDITS as desired
labs(color = "Project") +
ggtitle("NMDS example") +
## adding stress value to plot
annotate(geom = "label", x = -Inf, y = Inf, label = sprintf("Stress: %.6f", NMDS$stress), hjust = 0, vjust = 1,
label.size = NA, fontface = "italic", color = "grey30", size = 2.5, fill="white") +
## Theme: USER EDITS as desired
theme_bw() +
theme(
legend.title = element_text(face = "bold", size=12),
legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold"),
)
## Calculating NMDS
NMDS <- ordinate(physeq = phylo_obj, method = "NMDS", distance = "bray")
## Plotting
plot_ordination(phylo_obj, NMDS,
## USER EDITS shape, color, alpha, fill, etc. as desired based on project metadata
color = "SampleType") +
## Point and point aesthetics
geom_point(aes(color = SampleType), alpha = .5, size = 5) +
scale_color_manual(values = c("green4", "gold3")) +
## Labels: USER EDITS as desired
labs(color = "Project") +
ggtitle("NMDS example") +
## adding stress value to plot
annotate(geom = "label", x = -Inf, y = Inf, label = sprintf("Stress: %.6f", NMDS$stress), hjust = 0, vjust = 1,
label.size = NA, fontface = "italic", color = "grey30", size = 2.75, fill="white") +
## Theme: USER EDITS as desired
theme_bw() +
theme(
legend.title = element_text(face = "bold", size=12),
legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold"),
)
## USER EDITS WIDTH AND HEIGHT TO DESIRED
ggsave("example_output/Figures/NMDS_phyloseq.png", width = 7, height = 5)
## Plotting
plot_ordination(phylo_obj, NMDS,
## USER EDITS shape, color, alpha, fill, etc. as desired based on project metadata
color = "SampleType") +
## Point and point aesthetics
geom_point(aes(color = SampleType), alpha = .5, size = 5) +
scale_color_manual(values = c("green4", "gold3")) +
## Labels: USER EDITS as desired
labs(color = "Project") +
ggtitle("NMDS example") +
## adding stress value to plot
annotate(geom = "label", x = 0.29, y = 0.48, label = sprintf("Stress: %.6f", NMDS$stress), hjust = 0, vjust = 1,
label.size = NA, fontface = "italic", color = "grey30", size = 2.75, fill="white") +
## Theme: USER EDITS as desired
theme_bw() +
theme(
legend.title = element_text(face = "bold", size=12),
legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold"),
)
## Plotting
plot_ordination(phylo_obj, NMDS,
## USER EDITS shape, color, alpha, fill, etc. as desired based on project metadata
color = "SampleType") +
## Point and point aesthetics
geom_point(aes(color = SampleType), alpha = .5, size = 5) +
scale_color_manual(values = c("green4", "gold3")) +
## Labels: USER EDITS as desired
labs(color = "Project") +
ggtitle("NMDS example") +
## adding stress value to plot
annotate(geom = "label", x = 0.29, y = 0.42, label = sprintf("Stress: %.6f", NMDS$stress), hjust = 0, vjust = 1,
label.size = NA, fontface = "italic", color = "grey30", size = 2.75, fill="white") +
## Theme: USER EDITS as desired
theme_bw() +
theme(
legend.title = element_text(face = "bold", size=12),
legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold"),
)
## Plotting
plot_ordination(phylo_obj, NMDS,
## USER EDITS shape, color, alpha, fill, etc. as desired based on project metadata
color = "SampleType") +
## Point and point aesthetics
geom_point(aes(color = SampleType), alpha = .5, size = 5) +
scale_color_manual(values = c("green4", "gold3")) +
## Labels: USER EDITS as desired
labs(color = "Project") +
ggtitle("NMDS example") +
## adding stress value to plot
annotate(geom = "label", x = 0.29, y = 0.36, label = sprintf("Stress: %.6f", NMDS$stress), hjust = 0, vjust = 1,
label.size = NA, fontface = "italic", color = "grey30", size = 2.75, fill="white") +
## Theme: USER EDITS as desired
theme_bw() +
theme(
legend.title = element_text(face = "bold", size=12),
legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold"),
)
## Plotting
plot_ordination(phylo_obj, NMDS,
## USER EDITS shape, color, alpha, fill, etc. as desired based on project metadata
color = "SampleType") +
## Point and point aesthetics
geom_point(aes(color = SampleType), alpha = .5, size = 5) +
scale_color_manual(values = c("green4", "gold3")) +
## Labels: USER EDITS as desired
labs(color = "Project") +
ggtitle("NMDS example") +
## adding stress value to plot
annotate(geom = "label", x = 0.49, y = 0.36, label = sprintf("Stress: %.6f", NMDS$stress), hjust = 0, vjust = 1,
label.size = NA, fontface = "italic", color = "grey30", size = 2.75, fill="white") +
## Theme: USER EDITS as desired
theme_bw() +
theme(
legend.title = element_text(face = "bold", size=12),
legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold"),
)
## Plotting
plot_ordination(phylo_obj, NMDS,
## USER EDITS shape, color, alpha, fill, etc. as desired based on project metadata
color = "SampleType") +
## Point and point aesthetics
geom_point(aes(color = SampleType), alpha = .5, size = 5) +
scale_color_manual(values = c("green4", "gold3")) +
## Labels: USER EDITS as desired
labs(color = "Project") +
ggtitle("NMDS example") +
## adding stress value to plot
annotate(geom = "label", x = 0.39, y = 0.36, label = sprintf("Stress: %.6f", NMDS$stress), hjust = 0, vjust = 1,
label.size = NA, fontface = "italic", color = "grey30", size = 2.75, fill="white") +
## Theme: USER EDITS as desired
theme_bw() +
theme(
legend.title = element_text(face = "bold", size=12),
legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold"),
)
## Plotting
plot_ordination(phylo_obj, NMDS,
## USER EDITS shape, color, alpha, fill, etc. as desired based on project metadata
color = "SampleType") +
## Point and point aesthetics
geom_point(aes(color = SampleType), alpha = .5, size = 5) +
scale_color_manual(values = c("green4", "gold3")) +
## Labels: USER EDITS as desired
labs(color = "Project") +
ggtitle("NMDS example") +
## adding stress value to plot
annotate(geom = "label", x = 0.3, y = 0.36, label = sprintf("Stress: %.6f", NMDS$stress), hjust = 0, vjust = 1,
label.size = NA, fontface = "italic", color = "grey30", size = 2.75, fill="white") +
## Theme: USER EDITS as desired
theme_bw() +
theme(
legend.title = element_text(face = "bold", size=12),
legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold"),
)
## Plotting
plot_ordination(phylo_obj, NMDS,
## USER EDITS shape, color, alpha, fill, etc. as desired based on project metadata
color = "SampleType") +
## Point and point aesthetics
geom_point(aes(color = SampleType), alpha = .5, size = 5) +
scale_color_manual(values = c("green4", "gold3")) +
## Labels: USER EDITS as desired
labs(color = "Project") +
ggtitle("NMDS example") +
## adding stress value to plot
annotate(geom = "label", x = 0.32, y = 0.36, label = sprintf("Stress: %.6f", NMDS$stress), hjust = 0, vjust = 1,
label.size = NA, fontface = "italic", color = "grey30", size = 2.75, fill="white") +
## Theme: USER EDITS as desired
theme_bw() +
theme(
legend.title = element_text(face = "bold", size=12),
legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold"),
)
## Calculating NMDS
NMDS <- ordinate(physeq = phylo_obj, method = "NMDS", distance = "bray")
## Plotting
plot_ordination(phylo_obj, NMDS,
## USER EDITS shape, color, alpha, fill, etc. as desired based on project metadata
color = "SampleType") +
## Point and point aesthetics
geom_point(aes(color = SampleType), alpha = .5, size = 5) +
scale_color_manual(values = c("green4", "gold3")) +
## Labels: USER EDITS as desired
labs(color = "Project") +
ggtitle("NMDS example") +
## adding stress value to plot (user edits x and y to desired location)
annotate(geom = "label", x = 0.32, y = 0.36,
label = sprintf("Stress: %.6f", NMDS$stress), hjust = 0, vjust = 1,
label.size = NA, fontface = "italic", color = "grey30", size = 2.75, fill="white") +
## Theme: USER EDITS as desired
theme_bw() +
theme(
legend.title = element_text(face = "bold", size=12),
legend.position = "right",
axis.title.y = element_text(margin = margin(t = 0, r = 10, b = 0, l = 0), size=10, face="bold"),
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 0, l = 0), size=10, face="bold"),
)
## USER EDITS WIDTH AND HEIGHT TO DESIRED
ggsave("example_output/Figures/NMDS_phyloseq.png", width = 7, height = 5)
library(broom)
test_results <- tidy(permanova)
permanova <- adonis2(bray_df ~ SampleType, data = sample_df, permutations = 99)
library(broom)
test_results <- tidy(permanova)
kable(test_results)
multiple_hit_choice_edited <- read_xlsx("example_output/Taxonomic_assignments/Choice_required_GMGI_multiplehits_edited.xlsx")
multiple_hit_choice_edited
multiple_hit_choice_edited <- read_xlsx("example_output/Taxonomic_assignments/Choice_required_GMGI_multiplehits_edited.xlsx") %>%
filter(!is.na(Choice))
multiple_hit_choice_edited
Blast_GMGI_edited <- Blast_GMGI %>%
### picking one of several hits
filter(case_when(
ASV_ID == multiple_hit_choice_edited$ASV_ID ~ multiple_hit_choice_edited$sseqid,
TRUE ~ TRUE))
library(ggplot2) ## for plotting
library(dplyr) ## for data table manipulation
library(tidyr) ## for data table manipulation
library(readr) ## for reading in tsv files
library(readxl) ## for reading in excel files
library(stringr) ## for data transformation
library(strex) ## for data transformation
library(writexl) ## for excel output
library(purrr) ## for data transformation
library(funrar) ## for make_relative()
library(tidyverse) ## for data table manipulation
### User edits:
### 1. change paths of input and output as desired
## GMGI Fish database
path_GMGIdb = "../Reference Databases/GMGI_Vert_Ref.xlsx"
path_fishbase_tax = "../Reference Databases/taxonomic_classification_fishbase.csv"
path_mitofish_tax = "../Reference Databases/taxonomic_classification_mitofish.csv"
## BLAST results
path_blast_gmgi = "example_input/BLASTResults_GMGI.txt"
path_blast_mito = "example_input/BLASTResults_Mito.txt"
path_blast_ncbi_taxassigned = "example_input/NCBI_taxassigned.txt"
path_blast_ncbi = "example_input/BLASTResults_NCBI.txt"
## ASV table results
## confirm that the ASV_table.len.tsv name is correct for user's project
path_asv_table = "example_input/ASV_table.len.tsv"
path_output_summary = "example_input/overall_summary.tsv"
# output paths
path_choice_required = "example_output/Taxonomic_assignments/Choice_required_GMGI_multiplehits.xlsx"
path_disagree_list = "example_output/Taxonomic_assignments/SampleReport_taxonomic_ID.xlsx"
results_rawreads_matrix = "example_output/Results_rawreads_matrix.xlsx"
results_rawreads_long = "example_output/Results_rawreads_long.xlsx"
results_relab_matrix = "example_output/Results_relab_matrix.xlsx"
results_relab_long = "example_output/Results_relab_long.xlsx"
### User edits:
### 1. change path of metadata file
## EXCEL
# meta <- read_excel("example_input/metadata.xlsx")
## CSV
meta <- read.csv("example_input/metadata.csv", header = TRUE)
## add code to manipulate sample ID if needed
## change samplesheet back to metadata.csv
# Load GMGI database information (common name, species name, etc.)
gmgi_db <- read_xlsx(path_GMGIdb, sheet = 1) %>% dplyr::rename(sseqid = Ref) %>%
## removing > from beginning of entires within Ref column
mutate(sseqid = gsub(">", "", sseqid))
## Setting column header names and classes
blast_col_headers = c("ASV_ID", "sseqid", "pident", "length", "mismatch", "gapopen",
"qstart", "qend", "sstart", "send", "evalue", "bitscore")
blast_col_classes = c(rep("character", 2), rep("numeric", 10))
Blast_GMGI <- read.table(path_blast_gmgi, header=F, col.names = blast_col_headers, colClasses = blast_col_classes) %>%
## blast changes spaces to hyphons so we need to change that back to match our metadata
mutate(sseqid = gsub("-", " ", sseqid)) %>%
## join with GMGI database information
left_join(., gmgi_db, by = "sseqid")
## Check how many ASVs were identified with the GMGI Database
length(unique(Blast_GMGI$ASV_ID))
Blast_Mito <- read.table(path_blast_mito, header=F, col.names = blast_col_headers, colClasses = blast_col_classes) %>%
# renaming sseqid to species name
dplyr::rename(Species_name = sseqid) %>%
# replacing _ with spaces
mutate(Species_name = gsub("_", " ", Species_name))
NCBI_taxassigned <- read.delim2(path_blast_ncbi_taxassigned, header=F, col.names = c("staxid", "Phylo")) %>%
## creating taxonomic assignment columns
separate(Phylo, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species_name"), sep = ";") %>%
## creating species column based on Species_name
mutate(., species = str_after_nth(Species_name, " ", 1))
Blast_NCBI <- read.table(path_blast_ncbi, header=F,
col.names = c("ASV_ID", "sseqid", "sscinames", "staxid", "pident", "length", "mismatch",
"gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore"),
colClasses = c(rep("character", 3), "integer", rep("numeric", 9))) %>%
left_join(., NCBI_taxassigned, by = "staxid")
ASV_table <- read_tsv(path_asv_table, show_col_types = FALSE) %>%
## calculate the sum of all reads for each ASV
mutate(., ASV_sum = rowSums(across(where(is.numeric)))) %>%
## calculate a ranking based on those sum calculated above
mutate(ASV_rank = rank(-ASV_sum, ties.method='random')) %>%
## move the sum and rank columns to after ASV_ID and arrange by rank
relocate(c(ASV_sum,ASV_rank), .after = ASV_ID) %>% arrange((ASV_rank))
## creating list of rankings
ASV_rank_list <- ASV_table %>% dplyr::select(ASV_ID, ASV_sum, ASV_rank)
multiple_hit_choice <- Blast_GMGI %>% group_by(ASV_ID) %>%
## take top percent identity hit, count the number of top hits, and filter to those with more than 1 top hit
slice_max(pident, n=1) %>% count() %>% filter(n>1) %>%
## adding BLAST_GMGI information with these ASVs and ASV rank and sum
left_join(., Blast_GMGI, by = "ASV_ID") %>%
left_join(., ASV_rank_list, by = "ASV_ID") %>%
## moving database percent ID to be next to Blast percent ID
relocate(c(db_percent_ID, ASV_sum, ASV_rank), .after = pident); multiple_hit_choice
## export this data frame as excel sheet
multiple_hit_choice %>% write_xlsx(path_choice_required)
multiple_hit_choice_edited <- read_xlsx("example_output/Taxonomic_assignments/Choice_required_GMGI_multiplehits_edited.xlsx") %>%
## selecting the choices made
filter(!is.na(Choice))
library(ggplot2) ## for plotting
library(dplyr) ## for data table manipulation
library(tidyr) ## for data table manipulation
library(readr) ## for reading in tsv files
library(readxl) ## for reading in excel files
library(stringr) ## for data transformation
library(strex) ## for data transformation
library(writexl) ## for excel output
library(purrr) ## for data transformation
library(funrar) ## for make_relative()
library(tidyverse) ## for data table manipulation
### User edits:
### 1. change paths of input and output as desired
## GMGI Fish database
path_GMGIdb = "../Reference Databases/GMGI_Vert_Ref.xlsx"
path_fishbase_tax = "../Reference Databases/taxonomic_classification_fishbase.csv"
path_mitofish_tax = "../Reference Databases/taxonomic_classification_mitofish.csv"
## BLAST results
path_blast_gmgi = "example_input/BLASTResults_GMGI.txt"
path_blast_mito = "example_input/BLASTResults_Mito.txt"
path_blast_ncbi_taxassigned = "example_input/NCBI_taxassigned.txt"
path_blast_ncbi = "example_input/BLASTResults_NCBI.txt"
## ASV table results
## confirm that the ASV_table.len.tsv name is correct for user's project
path_asv_table = "example_input/ASV_table.len.tsv"
path_output_summary = "example_input/overall_summary.tsv"
# output paths
path_choice_required = "example_output/Taxonomic_assignments/Choice_required_GMGI_multiplehits.xlsx"
path_disagree_list = "example_output/Taxonomic_assignments/SampleReport_taxonomic_ID.xlsx"
results_rawreads_matrix = "example_output/Results_rawreads_matrix.xlsx"
results_rawreads_long = "example_output/Results_rawreads_long.xlsx"
results_relab_matrix = "example_output/Results_relab_matrix.xlsx"
results_relab_long = "example_output/Results_relab_long.xlsx"
### User edits:
### 1. change path of metadata file
## EXCEL
# meta <- read_excel("example_input/metadata.xlsx")
## CSV
meta <- read.csv("example_input/metadata.csv", header = TRUE)
## add code to manipulate sample ID if needed
## change samplesheet back to metadata.csv
# Load GMGI database information (common name, species name, etc.)
gmgi_db <- read_xlsx(path_GMGIdb, sheet = 1) %>% dplyr::rename(sseqid = Ref) %>%
## removing > from beginning of entires within Ref column
mutate(sseqid = gsub(">", "", sseqid))
## Setting column header names and classes
blast_col_headers = c("ASV_ID", "sseqid", "pident", "length", "mismatch", "gapopen",
"qstart", "qend", "sstart", "send", "evalue", "bitscore")
blast_col_classes = c(rep("character", 2), rep("numeric", 10))
Blast_GMGI <- read.table(path_blast_gmgi, header=F, col.names = blast_col_headers, colClasses = blast_col_classes) %>%
## blast changes spaces to hyphons so we need to change that back to match our metadata
mutate(sseqid = gsub("-", " ", sseqid)) %>%
## join with GMGI database information
left_join(., gmgi_db, by = "sseqid")
## Check how many ASVs were identified with the GMGI Database
length(unique(Blast_GMGI$ASV_ID))
Blast_Mito <- read.table(path_blast_mito, header=F, col.names = blast_col_headers, colClasses = blast_col_classes) %>%
# renaming sseqid to species name
dplyr::rename(Species_name = sseqid) %>%
# replacing _ with spaces
mutate(Species_name = gsub("_", " ", Species_name))
NCBI_taxassigned <- read.delim2(path_blast_ncbi_taxassigned, header=F, col.names = c("staxid", "Phylo")) %>%
## creating taxonomic assignment columns
separate(Phylo, c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species_name"), sep = ";") %>%
## creating species column based on Species_name
mutate(., species = str_after_nth(Species_name, " ", 1))
Blast_NCBI <- read.table(path_blast_ncbi, header=F,
col.names = c("ASV_ID", "sseqid", "sscinames", "staxid", "pident", "length", "mismatch",
"gapopen", "qstart", "qend", "sstart", "send", "evalue", "bitscore"),
colClasses = c(rep("character", 3), "integer", rep("numeric", 9))) %>%
left_join(., NCBI_taxassigned, by = "staxid")
ASV_table <- read_tsv(path_asv_table, show_col_types = FALSE) %>%
## calculate the sum of all reads for each ASV
mutate(., ASV_sum = rowSums(across(where(is.numeric)))) %>%
## calculate a ranking based on those sum calculated above
mutate(ASV_rank = rank(-ASV_sum, ties.method='random')) %>%
## move the sum and rank columns to after ASV_ID and arrange by rank
relocate(c(ASV_sum,ASV_rank), .after = ASV_ID) %>% arrange((ASV_rank))
## creating list of rankings
ASV_rank_list <- ASV_table %>% dplyr::select(ASV_ID, ASV_sum, ASV_rank)
multiple_hit_choice <- Blast_GMGI %>% group_by(ASV_ID) %>%
## take top percent identity hit, count the number of top hits, and filter to those with more than 1 top hit
slice_max(pident, n=1) %>% count() %>% filter(n>1) %>%
## adding BLAST_GMGI information with these ASVs and ASV rank and sum
left_join(., Blast_GMGI, by = "ASV_ID") %>%
left_join(., ASV_rank_list, by = "ASV_ID") %>%
## moving database percent ID to be next to Blast percent ID
relocate(c(db_percent_ID, ASV_sum, ASV_rank), .after = pident); multiple_hit_choice
## export this data frame as excel sheet
multiple_hit_choice %>% write_xlsx(path_choice_required)
multiple_hit_choice_edited <- read_xlsx("example_output/Taxonomic_assignments/Choice_required_GMGI_multiplehits_edited.xlsx") %>%
## selecting the choices made
filter(!is.na(Choice))
Blast_GMGI_edited <- Blast_GMGI %>%
### picking one of several hits
filter(case_when(
ASV_ID == multiple_hit_choice_edited$ASV_ID ~ multiple_hit_choice_edited$sseqid,
TRUE ~ TRUE))
Blast_GMGI_edited <- Blast_GMGI %>%
left_join(multiple_hit_choice_edited, by = "ASV_ID") %>%
mutate(
sseqid = case_when(
!is.na(Choice) ~ Choice,
TRUE ~ sseqid
)
) %>%
select(-Choice)
Blast_GMGI
multiple_hit_choice_edited
Blast_GMGI %>%
left_join(multiple_hit_choice_edited, by = "ASV_ID")
multiple_hit_choice_edited <- read_xlsx("example_output/Taxonomic_assignments/Choice_required_GMGI_multiplehits_edited.xlsx") %>%
## selecting the choices made
filter(!is.na(Choice)) %>
multiple_hit_choice_edited <- read_xlsx("example_output/Taxonomic_assignments/Choice_required_GMGI_multiplehits_edited.xlsx") %>%
## selecting the choices made
filter(!is.na(Choice)) %>%
## selecting only columns needed
dplyr::select(ASV_ID, sseqid)
multiple_hit_choice_edited
Blast_GMGI %>%
left_join(multiple_hit_choice_edited, by = "ASV_ID")
Blast_GMGI %>%
left_join(multiple_hit_choice_edited, by = c("ASV_ID", "sseqid"))
multiple_hit_choice_edited <- read_xlsx("example_output/Taxonomic_assignments/Choice_required_GMGI_multiplehits_edited.xlsx") %>%
## selecting the choices made
filter(!is.na(Choice)) %>%
## selecting only columns needed
dplyr::select(ASV_ID, sseqid, Choice)
Blast_GMGI %>%
left_join(multiple_hit_choice_edited, by = c("ASV_ID", "sseqid"))
Blast_GMGI %>%
left_join(multiple_hit_choice_edited, by = c("ASV_ID", "sseqid")) %>%
mutate(
sseqid = case_when(
!is.na(Choice) ~ Choice,
TRUE ~ sseqid
)
) %>%
select(-Choice)
Blast_GMGI %>%
left_join(multiple_hit_choice_edited, by = c("ASV_ID", "sseqid")) %>%
mutate(
sseqid = case_when(
!is.na(Choice) ~ Choice,
TRUE ~ sseqid
)
)
Blast_GMGI
multiple_hit_choice_edited
Blast_GMGI %>%
mutate(Choice = "x")
Blast_GMGI %>%
mutate(Choice = "x") %>%
## join multiple choice hit df
left_join(., multiple_hit_choice_edited, by = c("ASV_ID", "sseqid", "Choice"))
Blast_GMGI
multiple_hit_choice_edited$ASV_ID[1]
Blast_GMGI
1/20
3/(660*372)*10^6
310*0.6/2
